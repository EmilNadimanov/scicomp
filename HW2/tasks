##
# NUMERICAL REPRESENTATIONS
##

# TASK 1
Exercise: build a list of all four-digit binary numbers, and compute the corresponding single-digit hexadecimal number.
BIN  -> HEX
0001 -> 1
0010 -> 2
0011 -> 3
0100 -> 4
0101 -> 5 
0110 -> 6
0111 -> 7
1000 -> 8
1001 -> 9
1010 -> A
1011 -> B
1100 -> C
1101 -> D
1110 -> E
1111 -> F

# TASK 2
Exercise: Pretend we use a naïve floating-point format with 5bit mantissa and 3bit exponent (base-2). What is the smallest possible positive number representable? What is the largest positive number representable? The first bit of each is used for sign:

base-2
[±****][±**]
 ^^^^^  ^^^--- exponent
 |---------- mantissa

SMALLEST POSITIVE

[00001][111]
In decimal that means 1 * 2^-3 = 1/8
In base-2 that would be 0.001

LARGEST POSITIVE

[01111][011]
In decimal that's 15 * 2^3 = 120
In base-2 that looks like 1111000.0 because 64 + 32 + 16 + 8 = 96 + 24 = 120

# TASK 3
# Check what  python returns as an approximantion of 0.1
It does:
~ >>> python                                                                                                                                                                                                
>>> from decimal import Decimal
>>> print(repr(Decimal(0.1)))
Decimal('0.1000000000000000055511151231257827021181583404541015625')

# TASK 4
Approximation of 0.01

>>> print(repr(Decimal(0.01)))
Decimal('0.01000000000000000020816681711721685132943093776702880859375')

##
# DATA STRUCTURES
##

# TASK 5

Exercise: use diagrams like the ones on the reding page how to delete an item from a linked list.

>BEFORE:
---------------       ---------------       ---------------
| x[0] | next |--->-- | x[1] | next |--->---| x[2] | NULL | 
---------------       ---------------       ---------------

Speaking in terms of C, we the pointer of the first node should now point at the third element directly
And the second node should neither point at element 3 nor, most importantly, be pointed at by element 1

>DROPPING:
---------------         ---------------         ---------------
| x[0] | next |--\   X--| x[1] | next |--X   /->| x[2] | NULL | 
---------------   \     ---------------     /   ---------------
                   \-----------------------/

Element three changes index from 2 to 1
>RESULT:
---------------       ---------------
| x[0] | next |--->---| x[1] | NULL |
---------------       ---------------

# TASK 6

Exercise: assemble the numbers 1-10 into binary search trees which are (a) maximally unbalanced to the left, (b) balanced, (c) one step from balanced.

(a)
                  1
                 / \
                2
               /
              3
             /
            4
           /
          5
         /
        6
       /
      7
     /     
    8
   /
  9
 /
10

(b)
 
                   5
                 /   \
                3     8 
               / \   / \
              2  4  7   9
             /     /     \
            1      6     10

(c)
                   4    ---- longest right branch is 4 nodes long, longest left is 2
                 /   \
                2     7  ----- longest right branch is 3 nodes long, longest left one is 1 node long. Aw, shoot!
               / \   / \
              1  3  6   8    
                         \
                          9
                           \
                            10

# Task 7
Exercise: assemble a directed acyclic graph with the numbers 1-12 by strict divisibility: an edge from A to B if B/A is prime. There are no directed cycles, but some nodes do have multiple paths to them. (These form cycles if you ignore the direction.) Which ones? Explain how to decide if a number will have multiple paths to it.
 (11)
  ^
  |    ,->(5)->(10)
  |   /         ^
 (1)-[         / 
  |   \----->(2)->(4)->(8)
  |    \      \____ \____
  |     \__        v     v
  v        `->(3)->(6)->(12)
 (7)           `-->(9)

Nodes with values 6, 10, 12 have several paths to them because they have several divisors that are prime numbers.
E.g. if we use only integer multiplication, 12 has 2 prime divisors: 2 and 3, so node (12) will have paths from both 2 and 3.

# TASK 8
Exercise: Identify several maximal spanning trees in the divisibility graph from the previous exercise.

(1)->(2)->(4)->(8)

(1)->(3)->(6)->(12)


# TASK 9
Exercise: model acquaintance using a graph (vertices are people, an edge between A and B means A knows B). Model it with a directed graph. How are these different?

Bob knows Charlie and Mary
Charlie knows Bob, Mary and Harry
Mary knows Bob, Charlie and Harry
Harry knows Charlie and Mary
(Bob)---(Charlie)
 |     /     |
 |    /      |
(Mary)----(Harry)


Now that graph is directes, sometimes A knows B without B knowing A.
E.g. Bob and Mary know each other because edges are directed both ways between them.
But Charlie knows Bob without Bob knowing Charlie - as well as Mary knows Charlie and Charlie doesn't know Mary.
(Bob)<--(Charlie)
 | ^   ,^    |
 v |  /      v
(Mary)--->(Harry)
     ^,___/


##
# Cryptographic ideas
##

# TASK 10
 A more sophisticated strategy is to create a checksum: split the data into small pieces, interpreted as numbers, and add them all together. If the answers are the same, either the errors added to 0 (via overflow), or else the pieces are all the same.
Exercise: this doesn't mean the file was transferred correctly; why not?

Because 1) As the task tells, theere might have been an overflow of an unsigned integer value. Let's say checksum is supposed to be within one unsigned byte value or 255 in decimal. If our errors in numerical interpretation sum up to 255 and yet another error of value 1 is spotted, we will have a checksum of 0.
2) I am not aware of how primitive checksum is implemented, but from this explanation the following scenario seems possible: if a one package's checksum is smaller than the control value by N, and another package's checksum is bigger than the control value by N, these differences will even out once we sum everything together.

# TASK 11
Exercise: hash cat1 and cat2 with different hashing commands

~ >>> echo cat > testfile; echo cat2 > testfile2                                                                                                                                                       [130]
~ >>> md5sum testfile testfile2                                                                                                                                                                             
54b8617eca0e54c7d3c8e6732c6b687a  testfile
4307ab44204de40235bad8c66cce0ae9  testfile2
~ >>> sha1sum testfile testfile2                                                                                                                                                                            
8f6abfbac8c81b55f9005f7ec09e32d29e40eb40  testfile
f476b8741936d51309437ffc5c87081c7b24ffb1  testfile2
~ >>> sha512sum testfile testfile2                                                                                                                                                                          
644c7b649d31fc3c432534fb80d71a3a5e2b3eb65e737eb15c6e6af96e40c8ee3dcb55fd172e263783e62f8d94f5c99e12a016d581b860700640e45c9c1b87b3  testfile
84c308d32247eb3b590ff27b47d5018551dd6ad3e696b6d61b1e70fed7570522812a2c3353e93db38728f4a10de5156996b144d2b150f1ffe92ba7a301b5bfe2  testfile2
~ >>> b2sum testfile testfile2                                                                                                                                                                              
0247169dd9d258599e4a4327067f74f3dbd7db0e6d623954212738e62c233b410141a1eab4130073b99a8959e3d52f70da7402ae8d94ca6333126ec3b4e0bca7  testfile
48d92c152ff4c58a948d75f7aaba6ccaf00f8f9beb78e3399fe0f325e758af657c07eb2d83a753f3fe16074b149f46390abce8673c7477f75aae99427c9defa7  testfile2

# TASK 12
def caesar(message, sec):
    ascii_a = ord('a')
    ascii_A = ord('A')
    alph_size = 26
    res = ''
    for char in message:
            if char.islower():
		# we deduct 97 and add sec, the number of letters to shift; Then we take the remainder of division by the size of the English alphabet (to avoid going out of bounds)
		# and add back the orderly number of 'a' in ASCII to make nth letter of the alphabet look like itself when printed.
                    char = chr((ord(char) - ascii_a + sec) % alph_size + ascii_a)
            elif char.isupper():
		# same but 65 instead of 97
		# We also avoid changing anyhting not from the alphabet
                    char = chr((ord(char) - ascii_A + sec) % alph_size + ascii_A)
            res += char
    return res

# Testing it
>>> caesar("abcxyz ABCXYZ 123", 1)
'bcdyza BCDYZA 123'

# TASK 13
(We encrypt H(M) instead of M so that the size of sig doesn't grow with the size of M.)

 P  You                            Me    P,S
        \                         /
         \ RSA(P, -)   RSA(S, -) /
	  \                     /
   verify  <---------<---------<  sign

Exercise: Who can verify the signature? Who can decrypt the message? Why?

1)Anyone with the public key (aka P) can verify that the message was encrypted with a corresponding secret key (aka S), because it can be used in 

	RSA(P, sig) 
 		where sig=RSA(S, H)
			 where H is hashed message H(M)

2)Anyone with the public key P can decrypt the message encrypted with secret key S, because RSA(P, RSA(S, M)) = M where M is the message. That means that public key can decrypt secret key encryption. Moreover, P can decrypt only those messages that were encrypted via the corresponding S
